{"id":"index.html","dependencies":[{"name":"C:\\Users\\andre\\OneDrive\\Desktop\\rruii-website\\main.css","dynamic":true,"resolved":"C:\\Users\\andre\\OneDrive\\Desktop\\rruii-website\\main.css","parent":"C:\\Users\\andre\\OneDrive\\Desktop\\rruii-website\\index.html"},{"name":"C:\\Users\\andre\\OneDrive\\Desktop\\rruii-website\\js\\three.min.js","dynamic":true,"resolved":"C:\\Users\\andre\\OneDrive\\Desktop\\rruii-website\\js\\three.min.js","parent":"C:\\Users\\andre\\OneDrive\\Desktop\\rruii-website\\index.html"},{"name":"C:\\Users\\andre\\OneDrive\\Desktop\\rruii-website\\js\\OrbitControls.js","dynamic":true,"resolved":"C:\\Users\\andre\\OneDrive\\Desktop\\rruii-website\\js\\OrbitControls.js","parent":"C:\\Users\\andre\\OneDrive\\Desktop\\rruii-website\\index.html"},{"name":"C:\\Users\\andre\\OneDrive\\Desktop\\rruii-website\\js\\GLTFLoader.js","dynamic":true,"resolved":"C:\\Users\\andre\\OneDrive\\Desktop\\rruii-website\\js\\GLTFLoader.js","parent":"C:\\Users\\andre\\OneDrive\\Desktop\\rruii-website\\index.html"},{"name":"C:\\Users\\andre\\OneDrive\\Desktop\\rruii-website\\package.json","includedInParent":true,"mtime":1605979266388}],"generated":{"html":"<!DOCTYPE html>\r\n<html lang=\"en\">\r\n\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Document</title>\r\n    <link rel=\"stylesheet\" href=\"/4abed1c996f46e1b2ad61757af46ece4.css\">\r\n</head>\r\n\r\n<body>\r\n    <!--DECLARE HTML ELEMENTS-->\r\n    <div id=\"container\"></div>\r\n\r\n    <!--CALL THREE.JS MODULES-->\r\n    <script src=\"/21d17794c343e9d69280d5fff31d536c.js\"></script>\r\n    <script src=\"/ecc7a7c86111e3bcb63ba14186a60464.js\"></script>\r\n    <script src=\"/9c1604373d1006df80e9333b4a64ecb5.js\"></script>\r\n\r\n    <!--SHADERS GLSL FORMAT-->\r\n    <script id=\"fragment-shader\" type=\"x-shader/x-vertex\">\r\n        varying vec2 vCoordinates;\r\n        varying vec3 vPos;\r\n        uniform sampler2D flower;\r\n        uniform sampler2D particle;\r\n        uniform sampler2D mask;\r\n        \r\n\r\n        void main() \r\n        {\r\n            vec4 maskTexture = texture2D(mask,gl_PointCoord);\r\n            vec2 myUV = vec2(vCoordinates.x/512.,vCoordinates.y/512.);\r\n            vec4 image = texture2D(particle, myUV);\r\n\r\n            float alpha = 1. - clamp(0., 1., abs(vPos.z/900.));\r\n            gl_FragColor= image;\r\n            gl_FragColor.a *= maskTexture.r*alpha;\r\n\r\n        }\r\n    </script>\r\n\r\n    <script id=\"vertex-shader\" type=\"x-shader/x-vertex\">\r\n        varying vec2 vUv; \r\n        varying vec3 vPos; \r\n        varying vec2 vCoordinates;\r\n        attribute vec3 aCoordinates;\r\n        attribute float aSpeed;\r\n        attribute float aOffset;\r\n        attribute float aDirection; \r\n        attribute float aPress; \r\n\r\n        uniform float move;\r\n        uniform float time;\r\n        uniform vec2 mouse; \r\n\r\n        void main() \r\n        {\r\n            vUv = uv; \r\n            vec3 pos = position;\r\n\r\n             \r\n            pos.x += sin(move*aSpeed)*20.;\r\n            pos.y += sin(move*aSpeed)*20.;\r\n            pos.z = mod(position.z + move*200.*aSpeed + aOffset, 2000.) -1000.;\r\n            \r\n            vec3 stable = position; \r\n            float dist = distance(stable.xy, mouse);\r\n            float area = 1. - smoothstep(0.,300., dist);\r\n\r\n            stable.x += 50. *sin(0.1*time*aPress)*aDirection*area;\r\n            stable.y += 50. *sin(0.1*time*aPress)*aDirection*area;\r\n            stable.z += 200. *cos(0.1*time*aPress)*aDirection*area;\r\n      \r\n            vec4 mvPosition = modelViewMatrix * vec4(stable, 1. );\r\n            gl_PointSize= 5000. * (1. / -mvPosition.z);\r\n            gl_Position= projectionMatrix * mvPosition;\r\n\r\n            vCoordinates = aCoordinates.xy; \r\n            vPos = pos;\r\n        }\r\n    </script>\r\n\r\n\r\n    <!--SET-UP THREEJS TEMPLATE-->\r\n    <script>function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n//declare Sketch set-up class\nvar Sketch = /*#__PURE__*/function () {\n  function Sketch() {\n    _classCallCheck(this, Sketch);\n\n    // renderer settings- render window size\n    this.renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    this.renderer.setSize(window.innerWidth, window.innerHeight);\n    document.getElementById('container').appendChild(this.renderer.domElement); // camera properties\n\n    this.camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 5000);\n    this.camera.position.z = 1500; // create new scene\n\n    this.scene = new THREE.Scene(); //on mouse click\n\n    this.raycaster = new THREE.Raycaster();\n    this.mouse = new THREE.Vector2();\n    this.point = new THREE.Vector2(); //this.mask = new THREE.TextureLoader().load(mask);\n\n    this.time = 0;\n    this.move = 0;\n    this.addMesh();\n    this.mouseEffects();\n    this.render();\n  } // CONTROLS\n\n\n  _createClass(Sketch, [{\n    key: \"mouseEffects\",\n    value: function mouseEffects() {\n      var _this = this;\n\n      this.test = new THREE.Mesh(new THREE.BoxGeometry(2, 2, 2), new THREE.MeshBasicMaterial()); //on wheel scroll\n\n      window.addEventListener('mousewheel', function (e) {\n        console.log(e.wheelDeltaY);\n        _this.move += e.wheelDeltaY / 1000;\n      }); //on mouse click\n\n      window.addEventListener('mousemove', function (event) {\n        _this.mouse.x = event.clientX / window.innerWidth * 2 - 1;\n        _this.mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n\n        _this.raycaster.setFromCamera(_this.mouse, _this.camera); // calculate any objects intersecting with the mouse click\n        // array needed between parantheses\n\n\n        var intersects = _this.raycaster.intersectObjects([_this.test]);\n\n        _this.point.x = intersects[0].point.x;\n        _this.point.y = intersects[0].point.y;\n      }, false);\n    }\n  }, {\n    key: \"addMesh\",\n    value: function addMesh() {\n      // textures\n      //var mask = this.mask;\n      var flower = new THREE.TextureLoader().load('/images/flower.png');\n      var particle = new THREE.TextureLoader().load('/images/particle.png');\n      this.textures = [flower, particle]; // declare materials\n\n      this.material = new THREE.ShaderMaterial({\n        vertexShader: document.getElementById('vertex-shader').textContent,\n        fragmentShader: document.getElementById('fragment-shader').textContent,\n        uniforms: {\n          progress: {\n            type: \"f\",\n            value: 0\n          },\n          particle: {\n            type: \"t\",\n            value: this.textures[0]\n          },\n          flower: {\n            type: \"t\",\n            value: this.textures[1]\n          },\n          //mask: {type:\"t\", value: this.mask[1]},\n          mouse: {\n            type: \"v2\",\n            value: null\n          },\n          move: {\n            type: \"f\",\n            value: 0\n          },\n          time: {\n            type: \"f\",\n            value: 0\n          }\n        },\n        side: THREE.DoubleSide,\n        transparent: true,\n        depthTest: false,\n        depthWrite: false\n      }); // particles\n\n      var number = 512 * 512;\n      this.geometry = new THREE.BufferGeometry();\n      this.positions = new THREE.BufferAttribute(new Float32Array(number * 3), 3);\n      this.coordinates = new THREE.BufferAttribute(new Float32Array(number * 3), 3);\n      this.speeds = new THREE.BufferAttribute(new Float32Array(number), 1);\n      this.offset = new THREE.BufferAttribute(new Float32Array(number), 1);\n      this.direction = new THREE.BufferAttribute(new Float32Array(number), 1);\n      this.press = new THREE.BufferAttribute(new Float32Array(number), 1); // set random speeds for particles\n\n      function rand(a, b) {\n        return a + (b - a) * Math.random();\n      }\n\n      var index = 0;\n\n      for (var i = 0; i < 512; i++) {\n        var posX = i - 256;\n\n        for (var j = 0; j < 512; j++) {\n          this.positions.setXYZ(index, posX * 2, (j - 256) * 2, 0);\n          this.coordinates.setXYZ(index, i, j, 0);\n          this.offset.setX(index, rand(-1000, 1000));\n          this.speeds.setX(index, rand(0.4, 1));\n          this.direction.setX(index, Math.random() > 0.5 ? 1 : -1);\n          this.press.setX(index, rand(0.4, 1));\n          index++;\n        }\n      }\n\n      this.geometry.setAttribute(\"position\", this.positions);\n      this.geometry.setAttribute(\"aCoordinates\", this.coordinates);\n      this.geometry.setAttribute(\"aSpeed\", this.speeds);\n      this.geometry.setAttribute(\"aOffset\", this.offset);\n      this.geometry.setAttribute(\"aDirection\", this.direction);\n      this.geometry.setAttribute(\"aPress\", this.press); // create particles\n\n      this.mesh = new THREE.Points(this.geometry, this.material);\n      this.scene.add(this.mesh); //this.controls = new THREE.OrbitControls(this.camera, this.renderer.domElement);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      this.time++;\n      this.material.uniforms.time.value = this.time;\n      this.material.uniforms.move.value = this.move;\n      this.material.uniforms.mouse.value = this.point;\n      this.renderer.render(this.scene, this.camera);\n      window.requestAnimationFrame(this.render.bind(this));\n    }\n  }]);\n\n  return Sketch;\n}();\n\nnew Sketch();</script>\r\n\r\n</body>\r\n\r\n</html>"},"sourceMaps":null,"error":null,"hash":"47d0918d6508093e7befd9042b30fe1a","cacheData":{"env":{}}}